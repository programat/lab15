            int V = Verts.Count, E = MinSpan.Count;
            int[] dist = new int[V];
        
            // Step 1: Initialize distances from src to all
            // other vertices as INFINITE
            for (int i = 0; i < V; ++i)
                dist[i] = int.MaxValue;
            dist[src] = 0;
        
            // Step 2: Relax all edges |V| - 1 times. A simple
            // shortest path from src to any other vertex can
            // have at-most |V| - 1 edges
            for (int i = 1; i < V; ++i)
            {
                for (int j = 0; j < E; ++j)
                {
                    int u = graph.edge[j].src;
                    int v = graph.edge[j].dest;
                    int weight = graph.edge[j].weight;
                    if (dist[u] != int.MaxValue
                        && dist[u] + weight < dist[v])
                        dist[v] = dist[u] + weight;
                }
            }
        
            // Step 3: check for negative-weight cycles. The
            // above step guarantees shortest distances if graph
            // doesn't contain negative weight cycle. If we get
            // a shorter path, then there is a cycle.
            for (int j = 0; j < E; ++j)
            {
                int u = graph.edge[j].src;
                int v = graph.edge[j].dest;
                int weight = graph.edge[j].weight;
                if (dist[u] != int.MaxValue
                    && dist[u] + weight < dist[v])
                {
                    Console.WriteLine(
                        "Graph contains negative weight cycle");
                    return;
                }
            }
            printArr(dist, V);
            
            
            public static void BellmanFord(Graph graph, int source)
            {
            	int verticesCount = graph.VerticesCount;
            	int edgesCount = graph.EdgesCount;
            	int[] distance = new int[verticesCount];
            
            	for (int i = 0; i < verticesCount; i++)
            		distance[i] = int.MaxValue;
            
            	distance[source] = 0;
            
            	for (int i = 1; i <= verticesCount - 1; ++i)
            	{
            		for (int j = 0; j < edgesCount; ++j)
            		{
            			int u = graph.edge[j].Source;
            			int v = graph.edge[j].Destination;
            			int weight = graph.edge[j].Weight;
            
            			if (distance[u] != int.MaxValue && distance[u] + weight < distance[v])
            				distance[v] = distance[u] + weight;
            		}
            	}
            
            	for (int i = 0; i < edgesCount; ++i)
            	{
            		int u = graph.edge[i].Source;
            		int v = graph.edge[i].Destination;
            		int weight = graph.edge[i].Weight;
            
            		if (distance[u] != int.MaxValue && distance[u] + weight < distance[v])
            			Console.WriteLine("Graph contains negative weight cycle.");
            	}
            
            	Print(distance, verticesCount);
            }